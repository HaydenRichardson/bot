Looking for git in: git
Using git 2.17.1 from git
> git rev-parse --git-dir
Open repository: /root/ping-pong-bot/my-bot
> git fetch
> git status -z -u
> git check-ignore -v -z --stdin
Missing or invalid credentials.
Skip silent fetch commands
Missing or invalid credentials.
Skip silent fetch commands
remote: Repository not found.
fatal: Authentication failed for 'https://github.com/beans14/my-bot.git/'
> git check-ignore -v -z --stdin
> git symbolic-ref --short HEAD
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(upstream:track)%00%(objectname) refs/heads/main refs/remotes/main
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git check-ignore -v -z --stdin
> git status -z -u
> git check-ignore -v -z --stdin
> git check-ignore -v -z --stdin
> git symbolic-ref --short HEAD
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(upstream:track)%00%(objectname) refs/heads/main refs/remotes/main
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git show --textconv :.gitignore
> git ls-files --stage -- /root/ping-pong-bot/my-bot/.gitignore
> git status -z -u
> git check-ignore -v -z --stdin
> git check-ignore -v -z --stdin
> git symbolic-ref --short HEAD
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(upstream:track)%00%(objectname) refs/heads/main refs/remotes/main
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git check-ignore -v -z --stdin
> git show --textconv :.gitignore
> git ls-files --stage -- /root/ping-pong-bot/my-bot/.gitignore
> git check-ignore -v -z --stdin
> git check-ignore -v -z --stdin
> git add -A -- .
warning: CRLF will be replaced by LF in node_modules/@discordjs/node-pre-gyp/LICENSE.
The file will have its original line endings in your working directory.
warning: CRLF will be replaced by LF in node_modules/@discordjs/node-pre-gyp/README.md.
The file will have its original line endings in your working directory.
warning: CRLF will be replaced by LF in node_modules/@discordjs/node-pre-gyp/bin/node-pre-gyp.cmd.
The file will have its original line endings in your working directory.
> git -c user.useConfigOnly=true commit --quiet --allow-empty-message --file -

*** Please tell me who you are.

Run

  git config --global user.email "you@example.com"
  git config --global user.name "Your Name"

to set your account's default identity.
Omit --global to set the identity only in this repository.

fatal: no name was given and auto-detection is disabled
> git config --get-all user.name
> git ls-files --stage -- /root/ping-pong-bot/my-bot/.gitignore
> git cat-file -s 4e637713e0e9afa2b3ccb8d2b70f74e5465e4258
> git show --textconv :.gitignore
> git add -A -- .
> git -c user.useConfigOnly=true commit --quiet --allow-empty-message --file -

*** Please tell me who you are.

Run

  git config --global user.email "you@example.com"
  git config --global user.name "Your Name"

to set your account's default identity.
Omit --global to set the identity only in this repository.

fatal: no name was given and auto-detection is disabled
> git config --get-all user.name
> git ls-files --stage -- /root/ping-pong-bot/my-bot/.gitignore
> git cat-file -s 4e637713e0e9afa2b3ccb8d2b70f74e5465e4258
> git show --textconv :.gitignore
> git add -A -- .
> git -c user.useConfigOnly=true commit --quiet --allow-empty-message --file -
Auto packing the repository in background for optimum performance.
See "git help gc" for manual housekeeping.
> git status -z -u
> git symbolic-ref --short HEAD
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(upstream:track)%00%(objectname) refs/heads/main refs/remotes/main
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git ls-files --stage -- /root/ping-pong-bot/my-bot/.gitignore
> git cat-file -s 4e637713e0e9afa2b3ccb8d2b70f74e5465e4258
> git show --textconv :.gitignore
> git status -z -u
> git symbolic-ref --short HEAD
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(upstream:track)%00%(objectname) refs/heads/main refs/remotes/main
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git status -z -u
> git ls-files --stage -- /root/ping-pong-bot/my-bot/.gitignore
> git symbolic-ref --short HEAD
> git cat-file -s 4e637713e0e9afa2b3ccb8d2b70f74e5465e4258
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(upstream:track)%00%(objectname) refs/heads/main refs/remotes/main
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git show --textconv :.gitignore
> git status -z -u
> git symbolic-ref --short HEAD
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(upstream:track)%00%(objectname) refs/heads/main refs/remotes/main
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git push
fatal: The current branch main has no upstream branch.
To push the current branch and set the remote as upstream, use

    git push --set-upstream origin main
> git push -u origin main
> git status -z -u
> git symbolic-ref --short HEAD
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(upstream:track)%00%(objectname) refs/heads/main refs/remotes/main
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git push
fatal: The current branch main has no upstream branch.
To push the current branch and set the remote as upstream, use

    git push --set-upstream origin main
> git push -u origin main
> git ls-files --stage -- /root/ping-pong-bot/my-bot/.gitignore
> git cat-file -s 4e637713e0e9afa2b3ccb8d2b70f74e5465e4258
> git show --textconv :.gitignore
> git push
fatal: The current branch main has no upstream branch.
To push the current branch and set the remote as upstream, use

    git push --set-upstream origin main
> git push -u origin main
> git checkout -q main
> git status -z -u
> git symbolic-ref --short HEAD
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(upstream:track)%00%(objectname) refs/heads/main refs/remotes/main
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git ls-files --stage -- /root/ping-pong-bot/my-bot/.gitignore
> git cat-file -s 4e637713e0e9afa2b3ccb8d2b70f74e5465e4258
> git show --textconv :.gitignore
Missing or invalid credentials.
Error: socket hang up
    at connResetException (internal/errors.js:610:14)
    at Socket.socketOnEnd (_http_client.js:453:23)
    at Socket.emit (events.js:327:22)
    at endReadableNT (_stream_readable.js:1220:12)
    at processTicksAndRejections (internal/process/task_queues.js:84:21) {
  code: 'ECONNRESET'
}
remote: Repository not found.
fatal: Authentication failed for 'https://github.com/beans14/my-bot.git/'
remote: Repository not found.
fatal: Authentication failed for 'https://github.com/beans14/my-bot.git/'
remote: Repository not found.
fatal: Authentication failed for 'https://github.com/beans14/my-bot.git/'
> git push -u origin main
> git log --format=%H%n%aN%n%aE%n%at%n%ct%n%P%n%B -z -n21 -- /root/ping-pong-bot/my-bot/.gitignore
> git check-ignore -v -z --stdin
> git show --textconv :ystem
> git ls-files --stage -- /root/ping-pong-bot/my-bot/ystem
> git cat-file -s 641b2a2e1e2edd5581901ee8d3325472e579cac0
> git show --textconv :json/config.json
> git ls-files --stage -- /root/ping-pong-bot/my-bot/json/config.json
> git cat-file -s b586cf1e19df0af8cf24997e39bb198c29a421ea
> git show --textconv :index.js
> git ls-files --stage -- /root/ping-pong-bot/my-bot/index.js
> git cat-file -s 31375205ab4720409af72da9bf81dede58ede9e9
Missing or invalid credentials.
Error: socket hang up
    at connResetException (internal/errors.js:610:14)
    at Socket.socketOnEnd (_http_client.js:453:23)
    at Socket.emit (events.js:327:22)
    at endReadableNT (_stream_readable.js:1220:12)
    at processTicksAndRejections (internal/process/task_queues.js:84:21) {
  code: 'ECONNRESET'
}
remote: Repository not found.
fatal: Authentication failed for 'https://github.com/beans14/my-bot.git/'
> git status -z -u
> git symbolic-ref --short HEAD
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(upstream:track)%00%(objectname) refs/heads/main refs/remotes/main
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git ls-files --stage -- /root/ping-pong-bot/my-bot/index.js
> git cat-file -s 31375205ab4720409af72da9bf81dede58ede9e9
> git show --textconv :index.js
> git status -z -u
> git symbolic-ref --short HEAD
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(upstream:track)%00%(objectname) refs/heads/main refs/remotes/main
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git status -z -u
> git symbolic-ref --short HEAD
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(upstream:track)%00%(objectname) refs/heads/main refs/remotes/main
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git ls-files --stage -- /root/ping-pong-bot/my-bot/index.js
> git cat-file -s 31375205ab4720409af72da9bf81dede58ede9e9
> git show --textconv :index.js
> git status -z -u
> git symbolic-ref --short HEAD
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(upstream:track)%00%(objectname) refs/heads/main refs/remotes/main
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git status -z -u
> git symbolic-ref --short HEAD
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(upstream:track)%00%(objectname) refs/heads/main refs/remotes/main
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git ls-files --stage -- /root/ping-pong-bot/my-bot/index.js
> git cat-file -s 31375205ab4720409af72da9bf81dede58ede9e9
> git show --textconv :index.js
> git status -z -u
> git symbolic-ref --short HEAD
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(upstream:track)%00%(objectname) refs/heads/main refs/remotes/main
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git status -z -u
> git symbolic-ref --short HEAD
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(upstream:track)%00%(objectname) refs/heads/main refs/remotes/main
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git ls-files --stage -- /root/ping-pong-bot/my-bot/index.js
> git cat-file -s 31375205ab4720409af72da9bf81dede58ede9e9
> git show --textconv :index.js
> git status -z -u
> git symbolic-ref --short HEAD
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(upstream:track)%00%(objectname) refs/heads/main refs/remotes/main
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git status -z -u
> git symbolic-ref --short HEAD
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(upstream:track)%00%(objectname) refs/heads/main refs/remotes/main
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git ls-files --stage -- /root/ping-pong-bot/my-bot/index.js
> git cat-file -s 31375205ab4720409af72da9bf81dede58ede9e9
> git show --textconv :index.js
> git status -z -u
> git symbolic-ref --short HEAD
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(upstream:track)%00%(objectname) refs/heads/main refs/remotes/main
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git log --format=%H%n%aN%n%aE%n%at%n%ct%n%P%n%B -z -n21 -- /root/ping-pong-bot/my-bot/index.js
> git config --get commit.template
> git status -z -u
> git symbolic-ref --short HEAD
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(upstream:track)%00%(objectname) refs/heads/main refs/remotes/main
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git ls-files --stage -- /root/ping-pong-bot/my-bot/index.js
> git cat-file -s 31375205ab4720409af72da9bf81dede58ede9e9
> git show --textconv :index.js
> git status -z -u
> git symbolic-ref --short HEAD
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(upstream:track)%00%(objectname) refs/heads/main refs/remotes/main
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git status -z -u
> git symbolic-ref --short HEAD
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(upstream:track)%00%(objectname) refs/heads/main refs/remotes/main
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git ls-files --stage -- /root/ping-pong-bot/my-bot/index.js
> git cat-file -s 31375205ab4720409af72da9bf81dede58ede9e9
> git show --textconv :index.js
> git status -z -u
> git symbolic-ref --short HEAD
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(upstream:track)%00%(objectname) refs/heads/main refs/remotes/main
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git status -z -u
> git symbolic-ref --short HEAD
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(upstream:track)%00%(objectname) refs/heads/main refs/remotes/main
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git ls-files --stage -- /root/ping-pong-bot/my-bot/index.js
> git cat-file -s 31375205ab4720409af72da9bf81dede58ede9e9
> git show --textconv :index.js
> git status -z -u
> git symbolic-ref --short HEAD
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(upstream:track)%00%(objectname) refs/heads/main refs/remotes/main
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git ls-files --stage -- /root/ping-pong-bot/my-bot/index.js
> git cat-file -s 31375205ab4720409af72da9bf81dede58ede9e9
> git show --textconv :index.js
> git status -z -u
> git symbolic-ref --short HEAD
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(upstream:track)%00%(objectname) refs/heads/main refs/remotes/main
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git status -z -u
> git symbolic-ref --short HEAD
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(upstream:track)%00%(objectname) refs/heads/main refs/remotes/main
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git ls-files --stage -- /root/ping-pong-bot/my-bot/index.js
> git cat-file -s 31375205ab4720409af72da9bf81dede58ede9e9
> git show --textconv :index.js
> git status -z -u
> git symbolic-ref --short HEAD
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(upstream:track)%00%(objectname) refs/heads/main refs/remotes/main
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git status -z -u
> git symbolic-ref --short HEAD
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(upstream:track)%00%(objectname) refs/heads/main refs/remotes/main
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git ls-files --stage -- /root/ping-pong-bot/my-bot/index.js
> git cat-file -s 31375205ab4720409af72da9bf81dede58ede9e9
> git show --textconv :index.js
> git status -z -u
> git symbolic-ref --short HEAD
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(upstream:track)%00%(objectname) refs/heads/main refs/remotes/main
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git status -z -u
> git symbolic-ref --short HEAD
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(upstream:track)%00%(objectname) refs/heads/main refs/remotes/main
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git ls-files --stage -- /root/ping-pong-bot/my-bot/index.js
> git cat-file -s 31375205ab4720409af72da9bf81dede58ede9e9
> git show --textconv :index.js
> git status -z -u
> git symbolic-ref --short HEAD
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(upstream:track)%00%(objectname) refs/heads/main refs/remotes/main
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git ls-files --stage -- /root/ping-pong-bot/my-bot/index.js
> git cat-file -s 31375205ab4720409af72da9bf81dede58ede9e9
> git show --textconv :index.js
> git status -z -u
> git symbolic-ref --short HEAD
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(upstream:track)%00%(objectname) refs/heads/main refs/remotes/main
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git status -z -u
> git symbolic-ref --short HEAD
> git ls-files --stage -- /root/ping-pong-bot/my-bot/index.js
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(upstream:track)%00%(objectname) refs/heads/main refs/remotes/main
> git cat-file -s 31375205ab4720409af72da9bf81dede58ede9e9
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git show --textconv :index.js
> git status -z -u
> git symbolic-ref --short HEAD
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(upstream:track)%00%(objectname) refs/heads/main refs/remotes/main
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git ls-files --stage -- /root/ping-pong-bot/my-bot/index.js
> git config --get commit.template
> git cat-file -s 31375205ab4720409af72da9bf81dede58ede9e9
> git show --textconv :index.js
> git status -z -u
> git symbolic-ref --short HEAD
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(upstream:track)%00%(objectname) refs/heads/main refs/remotes/main
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git show --textconv :.gitignore
> git ls-files --stage -- /root/ping-pong-bot/my-bot/.gitignore
> git cat-file -s 4e637713e0e9afa2b3ccb8d2b70f74e5465e4258
> git check-ignore -v -z --stdin
> git status -z -u
> git symbolic-ref --short HEAD
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(upstream:track)%00%(objectname) refs/heads/main refs/remotes/main
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git status -z -u
> git symbolic-ref --short HEAD
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(upstream:track)%00%(objectname) refs/heads/main refs/remotes/main
> git ls-files --stage -- /root/ping-pong-bot/my-bot/.gitignore
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git cat-file -s 4e637713e0e9afa2b3ccb8d2b70f74e5465e4258
> git config --get commit.template
> git show --textconv :.gitignore
> git status -z -u
> git symbolic-ref --short HEAD
> git ls-files --stage -- /root/ping-pong-bot/my-bot/.gitignore
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(upstream:track)%00%(objectname) refs/heads/main refs/remotes/main
> git cat-file -s a56a7ef437dc60c77d16cefb82f3fcc35192b083
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git show --textconv :.gitignore
> git check-ignore -v -z --stdin
> git show --textconv HEAD:.gitignore
> git show --textconv :.gitignore
> git ls-tree -l HEAD -- /root/ping-pong-bot/my-bot/.gitignore
> git ls-files --stage -- /root/ping-pong-bot/my-bot/.gitignore
> git cat-file -s a56a7ef437dc60c77d16cefb82f3fcc35192b083
> git check-ignore -v -z --stdin
> git ls-tree -l HEAD -- /root/ping-pong-bot/my-bot/.gitignore
> git ls-files --stage -- /root/ping-pong-bot/my-bot/.gitignore
> git cat-file -s a56a7ef437dc60c77d16cefb82f3fcc35192b083
> git show --textconv :.gitignore
> git ls-files --stage -- /root/ping-pong-bot/my-bot/.gitignore
> git cat-file -s a56a7ef437dc60c77d16cefb82f3fcc35192b083
> git show --textconv :commands/fun/gif.js
> git ls-files --stage -- /root/ping-pong-bot/my-bot/commands/fun/gif.js
> git status -z -u
> git symbolic-ref --short HEAD
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(upstream:track)%00%(objectname) refs/heads/main refs/remotes/main
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git show --textconv :.gitignore
> git ls-files --stage -- /root/ping-pong-bot/my-bot/.gitignore
> git cat-file -s a56a7ef437dc60c77d16cefb82f3fcc35192b083
